State.java:

public interface State {
 
	public void insertMoney();
	public void ejectMoney();
	public void turnCrank();
	public void dispense();
}

NoMoneyState.java:

public class NoMoneyState implements State {
    GumballMachine gumballMachine;
 
    public NoMoneyState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
 
	public void insertMoney() {
		System.out.println("You inserted sufficient amount.");
		gumballMachine.setState(gumballMachine.getHasQuarterState());
	}
 
	public void ejectMoney() {
		System.out.println("You haven't inserted sufficient amount to get back.");
	}
 
	public void turnCrank() {
		System.out.println("You turned, but there's no sufficient amount.");
	 }
 
	public void dispense() {
		System.out.println("You need to pay first");
	} 
 
	public String toString() {
		return "waiting for quarter";
	}
}

HasEnoughMoneyState.java :

import java.util.Random;

public class HasEnoughMoneyState implements State {
	GumballMachine gumballMachine;
 
	public HasEnoughMoneyState(GumballMachine gumballMachine) {
		this.gumballMachine = gumballMachine;
	}
  
	public void insertMoney() {
		System.out.println("You can't insert another quarter");
	}
 
	public void ejectMoney() {
		System.out.println("Amount returned");
		gumballMachine.setState(gumballMachine.getNoQuarterState());
	}
 
	public void turnCrank() {
		System.out.println("You turned...");
		gumballMachine.setState(gumballMachine.getSoldState());
	}

    public void dispense() {
        System.out.println("No gumball dispensed");
    }
 
	public String toString() {
		return "waiting for turn of crank";
	}
}

SoldState.java :

public class SoldState implements State {
 
    GumballMachine gumballMachine;
 
    public SoldState(GumballMachine gumballMachine) {
        this.gumballMachine = gumballMachine;
    }
       
	public void insertMoney() {
		System.out.println("Please wait, we're already giving you a gumball");
	}
 
	public void ejectMoney() {
		System.out.println("Sorry, you already turned the crank");
	}
 
	public void turnCrank() {
		System.out.println("Turning twice doesn't get you another gumball!");
	}
 
	public void dispense() {
		gumballMachine.releaseBall();
		if (gumballMachine.getCount() > 0) {
			gumballMachine.setState(gumballMachine.getNoQuarterState());
		} else {
			System.out.println("Oops, out of gumballs!");
			gumballMachine.setState(gumballMachine.getSoldOutState());
		}
	}
 
	public String toString() {
		return "dispensing a gumball";
	}
}

SoldOutState.java :

public class SoldOutState implements State {
    GumballMachine gumballMachine;
 
    public SoldOutState(GumballMachine gumballM.achine) {
        this.gumballMachine = gumballMachine;
    }
 
	public void insertMoney() {
		System.out.println("You can't insert a quarter, the machine is sold out");
	}
 
	public void ejectMoney() {
		System.out.println("You can't eject, you haven't inserted enough money yet");
	}
 
	public void turnCrank() {
		System.out.println("You turned, but there are no gumballs");
	}
 
	public void dispense() {
		System.out.println("No gumball dispensed");
	}
 
	public String toString() {
		return "sold out";
	}
}

GumballMachine.java :

public class GumballMachine {
 
	State soldOutState;
	State noMoneyState;
	State hasEnoughMoneyState;
	State soldState;
 
	State state = soldOutState;
	int count = 0;
	int amt,remaining_amt = 0;
	int machine_no;

	public GumballMachine(int machine, int numberGumballs)
	{
		soldOutState = new SoldOutState(this);
		noMoneyState = new NoMoneyState(this);
		hasEnoughMoneyState = new HasEnoughMoneyState(this);
		soldState = new SoldState(this);
		machine_no = machine;

		this.count = numberGumballs;
 		if (numberGumballs > 0) {
			state = noMoneyState;
		} 
	}
 
	public void insertQuarter() 
	{
		if(this.machine_no == 1 && this.amt == 25)
			{System.out.println("Add only one quarter to get one gumball");}
		else if(this.machine_no ==2 && this.amt == 50 )
			{System.out.println("You have already added two quarters.");}
		else
			{this.amt += 25;}
	}
	
	public void insertCent() 
	{
		if(this.machine_no ==1 || this.machine_no == 2)
		{
			System.out.println("You cannot insert cent into this machine.");
		}
		else{
			this.amt += 1;
		}
	}
 
	public void insertNickle() 
	{
		if(this.machine_no ==1 || this.machine_no == 2)
		{
			System.out.println("You cannot insert Nickle into this machine.");
		}
		else{
			this.amt += 5;
		}
	}
	
	public void insertDime()
	{
		if(this.machine_no ==1 || this.machine_no == 2)
		{
			System.out.println("You cannot insert dime into this machine.");
		}
		else{
			this.amt += 10;
		}
	}
	
	public void eject() {
		state.ejectMoney();
	}
 
	public void turnCrank() 
	{
		if(machine_no == 1)
		{
			if(this.amt == 25)
			{
			state.insertMoney();
			state.turnCrank();
			state.dispense();
			}
		}
		else if(machine_no == 2)
		{
			if(this.amt == 50){
				state.insertMoney();
				state.turnCrank();
				state.dispense();}
		}
		else if(machine_no==3)
		{
		if(this.amt >= 50) 
		{
			state.insertMoney();
			this.remaining_amt = (this.amt -= 50);
				if(this.remaining_amt > 0)
				{
					System.out.println("You get the gumball. Keep the change "+ remaining_amt);
				}
				else
				{
					System.out.println("You get the gumball. Enjoy !!!");
				}
			this.remaining_amt = 0;
			state.turnCrank();
			state.dispense();
			this.amt = 0;
		} else
		{
			System.out.println("Sorry, Insufficient Amout. Please enter more amount!!!");
		}
	}
	}
	
	public void ejectMoney()
	{
		System.out.println("Get the amount "+this.amt);
		this.amt = 0;
	}

	void setState(State state) {
		this.state = state;
	}
 
	void releaseBall() {
		System.out.println("A gumball comes rolling out the slot...");
		if (count != 0) {
			count = count - 1;
		}
	}
 
	int getCount() {
		return count;
	}
 
	void refill(int count) {
		this.count = count;
		state = noMoneyState;
	}

    public State getState() {
        return state;
    }

    public State getSoldOutState() {
        return soldOutState;
    }

    public State getNoQuarterState() {
        return noMoneyState;
    }

    public State getHasQuarterState() {
        return hasEnoughMoneyState;
    }

    public State getSoldState() {
        return soldState;
    }
 
	public String toString() {
		StringBuffer result = new StringBuffer();
		result.append("\nMighty Gumball, Inc.");
		result.append("\nJava-enabled Standing Gumball Model #2004");
		result.append("\nInventory: " + count + " gumball");
		if (count != 1) {
			result.append("s");
		}
		result.append("\n");
		result.append("Machine is " + state + "\n");
		return result.toString();
	}
}

Main.java



public class Main {

	public static void main(String[] args) {
		
		GumballMachine gumballMachine1 = new GumballMachine(1,5);
		gumballMachine1.insertQuarter();
		gumballMachine1.turnCrank();

		System.out.println(gumballMachine1);

		GumballMachine gumballMachine2 = new GumballMachine(2,5);
		gumballMachine2.insertQuarter();
		gumballMachine2.insertQuarter();
		gumballMachine2.turnCrank();

		System.out.println(gumballMachine2);

		GumballMachine gumballMachine3 = new GumballMachine(3,5);
		gumballMachine3.insertQuarter();
		gumballMachine3.insertDime();
		gumballMachine3.insertCent();
		gumballMachine3.insertCent();
		gumballMachine3.insertCent();
		gumballMachine3.insertCent();
		gumballMachine3.insertCent();
		gumballMachine3.insertNickle();
		gumballMachine3.turnCrank();

		System.out.println(gumballMachine3);
	}
}
